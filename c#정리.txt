

c# -데이터 type과 memory allocation scheme이 연동됨
*장점 : 단순해짐
*단점 : 효율성 저하
기본형 - 문자형 정수형 실수형 ,레퍼런스(객체형 변수를 힙에서 할당하고, 저장할 때만 사용) : 무조건 스택영역에서 할당
c#에는 call by reference가 없다! 포인터제도도 사라짐

int x[10] (X불가능) 
int *p = (int *)malloc(sizeof(int)); (X 불가능)
=> new int[10];
-객체형 : 무조건 힙영역에서 할당됨(동적변수) 
	한 개 이상의 데이터를 구조체 덩어리로 정의
	*구조체(배열도 구조체의 일종으로 취급)
	*열거형/함수포인터/유니온 활용 가치 상실
-scope:의미없음. (지역변수/전역변수)

<프로그램 구조>
	-클래스 단위로만 구성됨 
	클래스 = (구조체 + 함수들)

{객체지향의 4가지 속성(원칙)}
1. Data abstraction(자료추상화) "클래스를 만드는 이유"
: 어떠한 사물을 정의하고자 할 때 그 사물에 속하는 서로 밀접한 연관이 있는 데이터와 함수를 묶어서 표현하는 제도

2. Inheritance(상속)
: 기존에 만들어진 클래스의 자원(데이터멤버/멤버함수)을 물려 받아서 재사용(재활용) 할 수 있는 제도

3. Dynamic Binding(동적 바인딩) "Dynamic Allocation과는 다른개념"
: 함수 호출을 위한 바인딩이 실행시에 이루어지는 제도

4. Polymorpism(다형개념)
: 객체들의 특성이 "서로 다르면서 같은 점", "서로 같으면서 다른 점"을 다루는 제도

